            +--------------------+
            | CSCC69             |
            | PROJECT 1: THREADS |
            | DESIGN DOCUMENT    |
            +--------------------+
   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

struct thread_sleep
  {
    struct list_elem elem;
    int64_t duration;
    struct semaphore semaphore;
  };

// 현재 자고 있는 스레드 목록
static struct list thread_sleep_list;

// thread_sleep_list를 갱신할 때, 리소스 잠금
static struct lock thread_sleep_lock;

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.
--- timer_sleep() ---
1. interrupt가 활성화 되어 있으면 비활성시킵니다.
2. thread_sleep 구조체를 heap에 생성합니다.
3. thread_sleep 구조체를 초기화합니다.
3-1. duration을 설정합니다.
3-2. semaphore를 0으로 초기화합니다.
4. thread_sleep_lock을 획득합니다.
5. thread_sleep_list 구조체를 thread_sleep_list에 추가합니다.
6. thread_sleep_lock을 해제합니다.
7. semaphore를 감소시킵니다. (0으로 초기화했기 때문에 현재 스레드는 블록됩니다.)
8. 이전에 interrupt가 활성화 되어 있었으면 다시 활성시킵니다.
--- timer interrupt handler ---
9. 경과 시간이 초과된 노드의 semaphore를 증가시킵니다.
--- timer_sleep() ---
10. 블록 해제된 스레드에서 thread_sleep 구조체를 해제합니다.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
lock을 사용해서 thread_sleep_list를 갱신할 때 리소스를 잠금니다.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
interrupt를 비활성화시켜서 다른 timer interrupt가 발생하지 않도록 막습니다.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
semaphore를 0으로 초기화하여 사용하면, 자연스럽게 해당 스레드를 블록시킬 수 있습니다.
이를 통해 CPU 시간을 사용하지 않고 일정 시간동안 실행을 지연할 수 있습니다.

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?


               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
